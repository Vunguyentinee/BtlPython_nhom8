# remove_person.py
import pickle
import shutil
from pathlib import Path
import mysql.connector

# ========== C·∫§U H√åNH ==========
ROOT = Path(r"E:\BTL_Python")
OUT_PKL = ROOT / "encodings" / "encodings_dlib20.pkl"
DATASET_ROOT = ROOT / "dataset"     # th∆∞ m·ª•c ·∫£nh
ALSO_DELETE_DATASET = True          # ƒë·∫∑t False n·∫øu kh√¥ng mu·ªën x√≥a ·∫£nh

DB_CONFIG = {
    "host": "127.0.0.1",
    "user": "root",
    "password": "21092005",
    "database": "dulieu_app",
    "port": 3306,
    "autocommit": True,
}

# ========== TI·ªÜN √çCH ==========
def split_name_id(s: str):
    """Tr·∫£ v·ªÅ (ten, ma_nv). N·∫øu input ch·ªâ l√† m√£ NV th√¨ (None, ma)."""
    s = s.strip()
    if "_" in s:
        a, b = s.rsplit("_", 1)
        return a.strip(), b.strip()
    # Kh√¥ng c√≥ "_" => coi nh∆∞ nh·∫≠p m√£ NV
    return None, s

def db_conn():
    return mysql.connector.connect(**DB_CONFIG)

# ========== ENCODINGS ==========
def remove_from_encodings(person_name_or_id: str) -> int:
    """
    X√≥a t·∫•t c·∫£ vectors kh·ªõp:
      - n·∫øu nh·∫≠p 'Ten_Ma' => so s√°nh theo full label (kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng)
      - n·∫øu nh·∫≠p ch·ªâ 'Ma'  => x√≥a m·ªçi label c√≥ ID ƒë√≥ ·ªü ƒëu√¥i
    Tr·∫£ v·ªÅ s·ªë vector ƒë√£ x√≥a.
    """
    if not OUT_PKL.exists():
        print("‚ùå Kh√¥ng t√¨m th·∫•y file encodings:", OUT_PKL)
        return 0

    with open(OUT_PKL, "rb") as f:
        data = pickle.load(f)

    names = list(data.get("names", []))
    embeddings = data.get("embeddings")
    if embeddings is None:
        print("‚ùå File encodings kh√¥ng h·ª£p l·ªá (thi·∫øu 'embeddings').")
        return 0

    ten, ma = split_name_id(person_name_or_id)
    keep_idx = []

    if ten is not None:  # c√≥ Ten_Ma
        target = f"{ten}_{ma}".lower()
        for i, n in enumerate(names):
            if n.lower() != target:
                keep_idx.append(i)
    else:  # ch·ªâ c√≥ Ma
        target_id = ma.lower()
        for i, n in enumerate(names):
            # t√°ch id theo h·∫≠u t·ªë sau '_' n·∫øu c√≥
            pid = n.rsplit("_", 1)[-1].lower() if "_" in n else ""
            if pid != target_id:
                keep_idx.append(i)

    removed = len(names) - len(keep_idx)
    if removed == 0:
        print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y '{person_name_or_id}' trong encodings.")
        return 0

    # c·∫≠p nh·∫≠t v√† ghi l·∫°i
    names_new = [names[i] for i in keep_idx]
    embeddings_new = embeddings[keep_idx]

    with open(OUT_PKL, "wb") as f:
        pickle.dump({"names": names_new, "embeddings": embeddings_new}, f)

    print(f"‚úÖ ƒê√£ xo√° {removed} vector c·ªßa '{person_name_or_id}' kh·ªèi {OUT_PKL.name}")
    return removed

# ========== DATABASE ==========
def delete_employee_in_db(person_name_or_id: str) -> int:
    """
    X√≥a nh√¢n vi√™n trong DB d·ª±a tr√™n m√£ NV (khuy·∫øn ngh·ªã).
    - N·∫øu nh·∫≠p Ten_Ma => l·∫•y 'Ma'.
    - N·∫øu nh·∫≠p ch·ªâ 'Ma' => d√πng lu√¥n.
    Tr·∫£ v·ªÅ s·ªë h√†ng b·ªã ·∫£nh h∆∞·ªüng (0/1).
    """
    ten, ma = split_name_id(person_name_or_id)
    if not ma:
        print("‚ö†Ô∏è Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c m√£ NV ƒë·ªÉ x√≥a trong DB.")
        return 0

    sql = "DELETE FROM nhanvien WHERE ma_nv=%s"
    try:
        with db_conn() as conn:
            with conn.cursor() as cur:
                cur.execute(sql, (ma,))
                affected = cur.rowcount
        if affected:
            # nh·ªù ON DELETE CASCADE, chamcong c≈©ng b·ªã x√≥a theo
            print(f"üóëÔ∏è  ƒê√£ x√≥a nh√¢n vi√™n ma_nv='{ma}' trong DB (v√† c√°c b·∫£n ghi ch·∫•m c√¥ng n·∫øu c√≥).")
        else:
            print(f"‚ÑπÔ∏è Kh√¥ng th·∫•y ma_nv='{ma}' trong DB.")
        return affected
    except mysql.connector.Error as e:
        print("‚ùå L·ªói MySQL khi x√≥a:", e)
        return 0

# ========== DATASET ==========
def delete_dataset_folder(person_name_or_id: str) -> bool:
    """
    X√≥a th∆∞ m·ª•c dataset theo:
      - n·∫øu nh·∫≠p Ten_Ma => x√≥a ƒë√∫ng th∆∞ m·ª•c ƒë√≥
      - n·∫øu ch·ªâ nh·∫≠p Ma  => t√¨m t·∫•t c·∫£ th∆∞ m·ª•c c√≥ h·∫≠u t·ªë _Ma v√† x√≥a
    """
    ten, ma = split_name_id(person_name_or_id)
    deleted_any = False

    if ten is not None:
        folder = DATASET_ROOT / f"{ten}_{ma}"
        if folder.exists():
            shutil.rmtree(folder, ignore_errors=True)
            print(f"üóÇÔ∏è  ƒê√£ x√≥a th∆∞ m·ª•c dataset: {folder}")
            deleted_any = True
        else:
            print(f"‚ÑπÔ∏è Kh√¥ng th·∫•y th∆∞ m·ª•c: {folder}")
    else:
        # t√¨m t·∫•t c·∫£ th∆∞ m·ª•c k·∫øt th√∫c b·∫±ng _<ma>
        if DATASET_ROOT.exists():
            for p in DATASET_ROOT.iterdir():
                if p.is_dir() and p.name.lower().endswith("_" + ma.lower()):
                    shutil.rmtree(p, ignore_errors=True)
                    print(f"üóÇÔ∏è  ƒê√£ x√≥a th∆∞ m·ª•c dataset: {p}")
                    deleted_any = True
        if not deleted_any:
            print(f"‚ÑπÔ∏è Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c n√†o c√≥ m√£ '{ma}' trong {DATASET_ROOT}")

    return deleted_any

# ========== MAIN ==========
if __name__ == "__main__":
    person = input("üë§ Nh·∫≠p 'T√™n_M√£NV' ho·∫∑c ch·ªâ 'M√£NV' c·∫ßn xo√°: ").strip()
    if not person:
        print("‚ùå Thi·∫øu ƒë·∫ßu v√†o.")
        raise SystemExit

    # 1) X√≥a kh·ªèi encodings
    remove_from_encodings(person)

    # 2) X√≥a trong DB (b·∫£ng nhanvien; chamcong s·∫Ω CASCADE)
    delete_employee_in_db(person)

    # 3) (tu·ª≥ ch·ªçn) X√≥a th∆∞ m·ª•c ·∫£nh dataset
    if ALSO_DELETE_DATASET:
        delete_dataset_folder(person)

    print("üéØ Ho√†n t·∫•t.")
